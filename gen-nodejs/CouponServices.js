//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = require('./coupon_types');
//HELPER FUNCTIONS AND STRUCTURES

CouponServices_queryCoupon_args = function(args) {
  this.queryParam = null;
  if (args) {
    if (args.queryParam !== undefined) {
      this.queryParam = args.queryParam;
    }
  }
};
CouponServices_queryCoupon_args.prototype = {};
CouponServices_queryCoupon_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.queryParam = new ttypes.QueryParamDTO();
        this.queryParam.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CouponServices_queryCoupon_args.prototype.write = function(output) {
  output.writeStructBegin('CouponServices_queryCoupon_args');
  if (this.queryParam !== null && this.queryParam !== undefined) {
    output.writeFieldBegin('queryParam', Thrift.Type.STRUCT, 1);
    this.queryParam.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CouponServices_queryCoupon_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
CouponServices_queryCoupon_result.prototype = {};
CouponServices_queryCoupon_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.QueryResultDTO();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CouponServices_queryCoupon_result.prototype.write = function(output) {
  output.writeStructBegin('CouponServices_queryCoupon_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CouponServices_consumeCoupon_args = function(args) {
  this.consumeParam = null;
  if (args) {
    if (args.consumeParam !== undefined) {
      this.consumeParam = args.consumeParam;
    }
  }
};
CouponServices_consumeCoupon_args.prototype = {};
CouponServices_consumeCoupon_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.consumeParam = new ttypes.ConsumeParamDTO();
        this.consumeParam.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CouponServices_consumeCoupon_args.prototype.write = function(output) {
  output.writeStructBegin('CouponServices_consumeCoupon_args');
  if (this.consumeParam !== null && this.consumeParam !== undefined) {
    output.writeFieldBegin('consumeParam', Thrift.Type.STRUCT, 1);
    this.consumeParam.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CouponServices_consumeCoupon_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
CouponServices_consumeCoupon_result.prototype = {};
CouponServices_consumeCoupon_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ConsumeResultDTO();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CouponServices_consumeCoupon_result.prototype.write = function(output) {
  output.writeStructBegin('CouponServices_consumeCoupon_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CouponServices_queryProjects_args = function(args) {
  this.merchantId = null;
  if (args) {
    if (args.merchantId !== undefined) {
      this.merchantId = args.merchantId;
    }
  }
};
CouponServices_queryProjects_args.prototype = {};
CouponServices_queryProjects_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.merchantId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CouponServices_queryProjects_args.prototype.write = function(output) {
  output.writeStructBegin('CouponServices_queryProjects_args');
  if (this.merchantId !== null && this.merchantId !== undefined) {
    output.writeFieldBegin('merchantId', Thrift.Type.STRING, 1);
    output.writeString(this.merchantId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CouponServices_queryProjects_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
CouponServices_queryProjects_result.prototype = {};
CouponServices_queryProjects_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ProjectResultDTO();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CouponServices_queryProjects_result.prototype.write = function(output) {
  output.writeStructBegin('CouponServices_queryProjects_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CouponServicesClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
CouponServicesClient.prototype = {};
CouponServicesClient.prototype.queryCoupon = function(queryParam, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_queryCoupon(queryParam);
};

CouponServicesClient.prototype.send_queryCoupon = function(queryParam) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryCoupon', Thrift.MessageType.CALL, this.seqid);
  var args = new CouponServices_queryCoupon_args();
  args.queryParam = queryParam;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CouponServicesClient.prototype.recv_queryCoupon = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CouponServices_queryCoupon_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryCoupon failed: unknown result');
};
CouponServicesClient.prototype.consumeCoupon = function(consumeParam, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_consumeCoupon(consumeParam);
};

CouponServicesClient.prototype.send_consumeCoupon = function(consumeParam) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('consumeCoupon', Thrift.MessageType.CALL, this.seqid);
  var args = new CouponServices_consumeCoupon_args();
  args.consumeParam = consumeParam;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CouponServicesClient.prototype.recv_consumeCoupon = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CouponServices_consumeCoupon_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('consumeCoupon failed: unknown result');
};
CouponServicesClient.prototype.queryProjects = function(merchantId, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_queryProjects(merchantId);
};

CouponServicesClient.prototype.send_queryProjects = function(merchantId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryProjects', Thrift.MessageType.CALL, this.seqid);
  var args = new CouponServices_queryProjects_args();
  args.merchantId = merchantId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CouponServicesClient.prototype.recv_queryProjects = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CouponServices_queryProjects_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryProjects failed: unknown result');
};
CouponServicesProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
CouponServicesProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

CouponServicesProcessor.prototype.process_queryCoupon = function(seqid, input, output) {
  var args = new CouponServices_queryCoupon_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.queryCoupon(args.queryParam, function (err, result) {
    var result = new CouponServices_queryCoupon_result((err != null ? err : {success: result}));
    output.writeMessageBegin("queryCoupon", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

CouponServicesProcessor.prototype.process_consumeCoupon = function(seqid, input, output) {
  var args = new CouponServices_consumeCoupon_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.consumeCoupon(args.consumeParam, function (err, result) {
    var result = new CouponServices_consumeCoupon_result((err != null ? err : {success: result}));
    output.writeMessageBegin("consumeCoupon", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

CouponServicesProcessor.prototype.process_queryProjects = function(seqid, input, output) {
  var args = new CouponServices_queryProjects_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.queryProjects(args.merchantId, function (err, result) {
    var result = new CouponServices_queryProjects_result((err != null ? err : {success: result}));
    output.writeMessageBegin("queryProjects", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}


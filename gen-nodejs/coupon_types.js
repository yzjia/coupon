//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = module.exports = {};
ttypes.MerchantEnum = {
'FIRST_P2P' : 0,
'ZHONGCHOU' : 1,
'DIANCAI' : 2
};
ttypes.StatusEnum = {
'INIT' : 0,
'OVERDUE' : 1,
'CUSTOME' : 2,
'VOID' : 3,
'DESTORY' : 4
};
ttypes.ResultEnum = {
'SUCCESS' : 0,
'FAIL' : 1
};
CouponModel = module.exports.CouponModel = function(args) {
  this.couponId = null;
  this.merchantId = null;
  this.projectId = null;
  this.projectName = null;
  this.supportScope = null;
  this.minAmount = null;
  this.isCycle = null;
  this.privilegeAmount = null;
  this.privilegeDiscount = null;
  this.rebateAmount = null;
  this.refererRebateAmount = null;
  this.refererRebateRatio = null;
  this.status = null;
  if (args) {
    if (args.couponId !== undefined) {
      this.couponId = args.couponId;
    }
    if (args.merchantId !== undefined) {
      this.merchantId = args.merchantId;
    }
    if (args.projectId !== undefined) {
      this.projectId = args.projectId;
    }
    if (args.projectName !== undefined) {
      this.projectName = args.projectName;
    }
    if (args.supportScope !== undefined) {
      this.supportScope = args.supportScope;
    }
    if (args.minAmount !== undefined) {
      this.minAmount = args.minAmount;
    }
    if (args.isCycle !== undefined) {
      this.isCycle = args.isCycle;
    }
    if (args.privilegeAmount !== undefined) {
      this.privilegeAmount = args.privilegeAmount;
    }
    if (args.privilegeDiscount !== undefined) {
      this.privilegeDiscount = args.privilegeDiscount;
    }
    if (args.rebateAmount !== undefined) {
      this.rebateAmount = args.rebateAmount;
    }
    if (args.refererRebateAmount !== undefined) {
      this.refererRebateAmount = args.refererRebateAmount;
    }
    if (args.refererRebateRatio !== undefined) {
      this.refererRebateRatio = args.refererRebateRatio;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
  }
};
CouponModel.prototype = {};
CouponModel.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.couponId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.merchantId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.projectId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.projectName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.supportScope = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.DOUBLE) {
        this.minAmount = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.isCycle = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.DOUBLE) {
        this.privilegeAmount = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.DOUBLE) {
        this.privilegeDiscount = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.DOUBLE) {
        this.rebateAmount = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.DOUBLE) {
        this.refererRebateAmount = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.DOUBLE) {
        this.refererRebateRatio = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CouponModel.prototype.write = function(output) {
  output.writeStructBegin('CouponModel');
  if (this.couponId !== null && this.couponId !== undefined) {
    output.writeFieldBegin('couponId', Thrift.Type.STRING, 1);
    output.writeString(this.couponId);
    output.writeFieldEnd();
  }
  if (this.merchantId !== null && this.merchantId !== undefined) {
    output.writeFieldBegin('merchantId', Thrift.Type.STRING, 2);
    output.writeString(this.merchantId);
    output.writeFieldEnd();
  }
  if (this.projectId !== null && this.projectId !== undefined) {
    output.writeFieldBegin('projectId', Thrift.Type.STRING, 3);
    output.writeString(this.projectId);
    output.writeFieldEnd();
  }
  if (this.projectName !== null && this.projectName !== undefined) {
    output.writeFieldBegin('projectName', Thrift.Type.STRING, 4);
    output.writeString(this.projectName);
    output.writeFieldEnd();
  }
  if (this.supportScope !== null && this.supportScope !== undefined) {
    output.writeFieldBegin('supportScope', Thrift.Type.STRING, 5);
    output.writeString(this.supportScope);
    output.writeFieldEnd();
  }
  if (this.minAmount !== null && this.minAmount !== undefined) {
    output.writeFieldBegin('minAmount', Thrift.Type.DOUBLE, 6);
    output.writeDouble(this.minAmount);
    output.writeFieldEnd();
  }
  if (this.isCycle !== null && this.isCycle !== undefined) {
    output.writeFieldBegin('isCycle', Thrift.Type.BOOL, 7);
    output.writeBool(this.isCycle);
    output.writeFieldEnd();
  }
  if (this.privilegeAmount !== null && this.privilegeAmount !== undefined) {
    output.writeFieldBegin('privilegeAmount', Thrift.Type.DOUBLE, 8);
    output.writeDouble(this.privilegeAmount);
    output.writeFieldEnd();
  }
  if (this.privilegeDiscount !== null && this.privilegeDiscount !== undefined) {
    output.writeFieldBegin('privilegeDiscount', Thrift.Type.DOUBLE, 9);
    output.writeDouble(this.privilegeDiscount);
    output.writeFieldEnd();
  }
  if (this.rebateAmount !== null && this.rebateAmount !== undefined) {
    output.writeFieldBegin('rebateAmount', Thrift.Type.DOUBLE, 10);
    output.writeDouble(this.rebateAmount);
    output.writeFieldEnd();
  }
  if (this.refererRebateAmount !== null && this.refererRebateAmount !== undefined) {
    output.writeFieldBegin('refererRebateAmount', Thrift.Type.DOUBLE, 11);
    output.writeDouble(this.refererRebateAmount);
    output.writeFieldEnd();
  }
  if (this.refererRebateRatio !== null && this.refererRebateRatio !== undefined) {
    output.writeFieldBegin('refererRebateRatio', Thrift.Type.DOUBLE, 12);
    output.writeDouble(this.refererRebateRatio);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 13);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueryParamDTO = module.exports.QueryParamDTO = function(args) {
  this.couponId = null;
  this.shortAlias = null;
  this.merchantId = null;
  this.projectId = null;
  if (args) {
    if (args.couponId !== undefined) {
      this.couponId = args.couponId;
    }
    if (args.shortAlias !== undefined) {
      this.shortAlias = args.shortAlias;
    }
    if (args.merchantId !== undefined) {
      this.merchantId = args.merchantId;
    }
    if (args.projectId !== undefined) {
      this.projectId = args.projectId;
    }
  }
};
QueryParamDTO.prototype = {};
QueryParamDTO.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.couponId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.shortAlias = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.merchantId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.projectId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryParamDTO.prototype.write = function(output) {
  output.writeStructBegin('QueryParamDTO');
  if (this.couponId !== null && this.couponId !== undefined) {
    output.writeFieldBegin('couponId', Thrift.Type.STRING, 1);
    output.writeString(this.couponId);
    output.writeFieldEnd();
  }
  if (this.shortAlias !== null && this.shortAlias !== undefined) {
    output.writeFieldBegin('shortAlias', Thrift.Type.STRING, 2);
    output.writeString(this.shortAlias);
    output.writeFieldEnd();
  }
  if (this.merchantId !== null && this.merchantId !== undefined) {
    output.writeFieldBegin('merchantId', Thrift.Type.STRING, 3);
    output.writeString(this.merchantId);
    output.writeFieldEnd();
  }
  if (this.projectId !== null && this.projectId !== undefined) {
    output.writeFieldBegin('projectId', Thrift.Type.STRING, 4);
    output.writeString(this.projectId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

QueryResultDTO = module.exports.QueryResultDTO = function(args) {
  this.coupon = null;
  this.isValidity = null;
  if (args) {
    if (args.coupon !== undefined) {
      this.coupon = args.coupon;
    }
    if (args.isValidity !== undefined) {
      this.isValidity = args.isValidity;
    }
  }
};
QueryResultDTO.prototype = {};
QueryResultDTO.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.coupon = new ttypes.CouponModel();
        this.coupon.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.isValidity = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

QueryResultDTO.prototype.write = function(output) {
  output.writeStructBegin('QueryResultDTO');
  if (this.coupon !== null && this.coupon !== undefined) {
    output.writeFieldBegin('coupon', Thrift.Type.STRUCT, 1);
    this.coupon.write(output);
    output.writeFieldEnd();
  }
  if (this.isValidity !== null && this.isValidity !== undefined) {
    output.writeFieldBegin('isValidity', Thrift.Type.BOOL, 2);
    output.writeBool(this.isValidity);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ConsumeParamDTO = module.exports.ConsumeParamDTO = function(args) {
  this.couponId = null;
  this.shortAlias = null;
  this.merchantId = null;
  this.projectId = null;
  this.ordereId = null;
  this.orderAmount = null;
  this.privilegeAmount = null;
  this.rebateAmount = null;
  this.refererRebateAmount = null;
  this.tradeTime = null;
  this.remark = null;
  if (args) {
    if (args.couponId !== undefined) {
      this.couponId = args.couponId;
    }
    if (args.shortAlias !== undefined) {
      this.shortAlias = args.shortAlias;
    }
    if (args.merchantId !== undefined) {
      this.merchantId = args.merchantId;
    }
    if (args.projectId !== undefined) {
      this.projectId = args.projectId;
    }
    if (args.ordereId !== undefined) {
      this.ordereId = args.ordereId;
    }
    if (args.orderAmount !== undefined) {
      this.orderAmount = args.orderAmount;
    }
    if (args.privilegeAmount !== undefined) {
      this.privilegeAmount = args.privilegeAmount;
    }
    if (args.rebateAmount !== undefined) {
      this.rebateAmount = args.rebateAmount;
    }
    if (args.refererRebateAmount !== undefined) {
      this.refererRebateAmount = args.refererRebateAmount;
    }
    if (args.tradeTime !== undefined) {
      this.tradeTime = args.tradeTime;
    }
    if (args.remark !== undefined) {
      this.remark = args.remark;
    }
  }
};
ConsumeParamDTO.prototype = {};
ConsumeParamDTO.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.couponId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.shortAlias = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.merchantId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.projectId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.ordereId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.DOUBLE) {
        this.orderAmount = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.DOUBLE) {
        this.privilegeAmount = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.DOUBLE) {
        this.rebateAmount = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.DOUBLE) {
        this.refererRebateAmount = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.tradeTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.remark = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ConsumeParamDTO.prototype.write = function(output) {
  output.writeStructBegin('ConsumeParamDTO');
  if (this.couponId !== null && this.couponId !== undefined) {
    output.writeFieldBegin('couponId', Thrift.Type.STRING, 1);
    output.writeString(this.couponId);
    output.writeFieldEnd();
  }
  if (this.shortAlias !== null && this.shortAlias !== undefined) {
    output.writeFieldBegin('shortAlias', Thrift.Type.STRING, 2);
    output.writeString(this.shortAlias);
    output.writeFieldEnd();
  }
  if (this.merchantId !== null && this.merchantId !== undefined) {
    output.writeFieldBegin('merchantId', Thrift.Type.STRING, 3);
    output.writeString(this.merchantId);
    output.writeFieldEnd();
  }
  if (this.projectId !== null && this.projectId !== undefined) {
    output.writeFieldBegin('projectId', Thrift.Type.STRING, 4);
    output.writeString(this.projectId);
    output.writeFieldEnd();
  }
  if (this.ordereId !== null && this.ordereId !== undefined) {
    output.writeFieldBegin('ordereId', Thrift.Type.STRING, 5);
    output.writeString(this.ordereId);
    output.writeFieldEnd();
  }
  if (this.orderAmount !== null && this.orderAmount !== undefined) {
    output.writeFieldBegin('orderAmount', Thrift.Type.DOUBLE, 6);
    output.writeDouble(this.orderAmount);
    output.writeFieldEnd();
  }
  if (this.privilegeAmount !== null && this.privilegeAmount !== undefined) {
    output.writeFieldBegin('privilegeAmount', Thrift.Type.DOUBLE, 7);
    output.writeDouble(this.privilegeAmount);
    output.writeFieldEnd();
  }
  if (this.rebateAmount !== null && this.rebateAmount !== undefined) {
    output.writeFieldBegin('rebateAmount', Thrift.Type.DOUBLE, 8);
    output.writeDouble(this.rebateAmount);
    output.writeFieldEnd();
  }
  if (this.refererRebateAmount !== null && this.refererRebateAmount !== undefined) {
    output.writeFieldBegin('refererRebateAmount', Thrift.Type.DOUBLE, 9);
    output.writeDouble(this.refererRebateAmount);
    output.writeFieldEnd();
  }
  if (this.tradeTime !== null && this.tradeTime !== undefined) {
    output.writeFieldBegin('tradeTime', Thrift.Type.STRING, 10);
    output.writeString(this.tradeTime);
    output.writeFieldEnd();
  }
  if (this.remark !== null && this.remark !== undefined) {
    output.writeFieldBegin('remark', Thrift.Type.STRING, 11);
    output.writeString(this.remark);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ConsumeResultDTO = module.exports.ConsumeResultDTO = function(args) {
  this.coupon = null;
  this.result = null;
  this.resultInfo = null;
  if (args) {
    if (args.coupon !== undefined) {
      this.coupon = args.coupon;
    }
    if (args.result !== undefined) {
      this.result = args.result;
    }
    if (args.resultInfo !== undefined) {
      this.resultInfo = args.resultInfo;
    }
  }
};
ConsumeResultDTO.prototype = {};
ConsumeResultDTO.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.coupon = new ttypes.CouponModel();
        this.coupon.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.result = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.resultInfo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ConsumeResultDTO.prototype.write = function(output) {
  output.writeStructBegin('ConsumeResultDTO');
  if (this.coupon !== null && this.coupon !== undefined) {
    output.writeFieldBegin('coupon', Thrift.Type.STRUCT, 1);
    this.coupon.write(output);
    output.writeFieldEnd();
  }
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.I32, 2);
    output.writeI32(this.result);
    output.writeFieldEnd();
  }
  if (this.resultInfo !== null && this.resultInfo !== undefined) {
    output.writeFieldBegin('resultInfo', Thrift.Type.STRING, 3);
    output.writeString(this.resultInfo);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProjectModel = module.exports.ProjectModel = function(args) {
  this.projectId = null;
  this.projectName = null;
  if (args) {
    if (args.projectId !== undefined) {
      this.projectId = args.projectId;
    }
    if (args.projectName !== undefined) {
      this.projectName = args.projectName;
    }
  }
};
ProjectModel.prototype = {};
ProjectModel.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.projectId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.projectName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectModel.prototype.write = function(output) {
  output.writeStructBegin('ProjectModel');
  if (this.projectId !== null && this.projectId !== undefined) {
    output.writeFieldBegin('projectId', Thrift.Type.STRING, 1);
    output.writeString(this.projectId);
    output.writeFieldEnd();
  }
  if (this.projectName !== null && this.projectName !== undefined) {
    output.writeFieldBegin('projectName', Thrift.Type.STRING, 2);
    output.writeString(this.projectName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProjectResultDTO = module.exports.ProjectResultDTO = function(args) {
  this.merchantId = null;
  this.projectList = null;
  if (args) {
    if (args.merchantId !== undefined) {
      this.merchantId = args.merchantId;
    }
    if (args.projectList !== undefined) {
      this.projectList = args.projectList;
    }
  }
};
ProjectResultDTO.prototype = {};
ProjectResultDTO.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.merchantId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.projectList = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.ProjectModel();
          elem6.read(input);
          this.projectList.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectResultDTO.prototype.write = function(output) {
  output.writeStructBegin('ProjectResultDTO');
  if (this.merchantId !== null && this.merchantId !== undefined) {
    output.writeFieldBegin('merchantId', Thrift.Type.STRING, 1);
    output.writeString(this.merchantId);
    output.writeFieldEnd();
  }
  if (this.projectList !== null && this.projectList !== undefined) {
    output.writeFieldBegin('projectList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.projectList.length);
    for (var iter7 in this.projectList)
    {
      if (this.projectList.hasOwnProperty(iter7))
      {
        iter7 = this.projectList[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

